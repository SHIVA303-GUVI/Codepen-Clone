{"version":3,"sources":["components/Editor.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","language","title","value","onChange","useState","open","setOpen","className","onClick","prevOpen","TransitEnterexit","Launch","onBeforeChange","editor","data","options","lineWrapping","line","mode","theme","lineNumbers","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","useEffect","timeout","setTimeout","clearTimeout","sandbox","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAqCeA,EA3BA,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAAc,EAC3BC,oBAAS,GADkB,mBAC5CC,EAD4C,KACtCC,EADsC,KAKnD,OACI,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACI,sBAAKE,UAAU,eAAf,UACMN,EACD,wBAAQO,QAAS,kBAAIF,GAAQ,SAAAG,GAAQ,OAAKA,MAAWF,UAAU,yBAA/D,SACKF,EAAO,cAACK,EAAA,EAAD,IAAuB,cAACC,EAAA,EAAD,SAGxC,cAAC,aAAD,CACAC,eAZR,SAAsBC,EAAOC,EAAKZ,GAC9BC,EAASD,IAYLA,MAAOA,EACPK,UAAU,sBAAsBQ,QAAS,CACrCC,cAAa,EACbC,MAAK,EACLC,KAAMlB,EACNmB,MAAO,WACPC,aAAa,SCOdC,EAnCH,WAAO,IAAD,EACQjB,mBAAS,IADjB,mBACTkB,EADS,KACHC,EADG,OAEMnB,mBAAS,IAFf,mBAEToB,EAFS,KAEJC,EAFI,OAGIrB,mBAAS,IAHb,mBAGTsB,EAHS,KAGLC,EAHK,OAIYvB,mBAAS,IAJrB,mBAITwB,EAJS,KAIDC,EAJC,KAqBhB,OAfAC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBH,EAAU,2BAAD,OAEHP,EAFG,+BAGFE,EAHE,iCAIDE,EAJC,oCAOT,KACF,OAAO,WACLO,aAAaF,MAEf,CAACT,EAAME,EAAKE,IAGZ,qCACA,sBAAKnB,UAAU,kBAAf,UACE,cAAC,EAAD,CAAQN,MAAM,OAAOD,SAAS,MAAME,MAAOoB,EAAMnB,SAAUoB,IAC3D,cAAC,EAAD,CAAQtB,MAAM,MAAMD,SAAS,MAAOE,MAAOsB,EAAKrB,SAAUsB,IAC1D,cAAC,EAAD,CAAQxB,MAAM,KAAKD,SAAS,aAAcE,MAAOwB,EAAIvB,SAAUwB,OAEjE,qBAAKpB,UAAU,QAAf,SACE,wBAAQqB,OAAQA,EAAQ3B,MAAM,SAASiC,QAAQ,gBAAgBC,MAAM,OAAOC,OAAO,eCpB1EC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.488776c1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport \"codemirror/mode/xml/xml\";\r\nimport \"codemirror/mode/css/css\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport {Controlled as ControlledEditor} from \"react-codemirror2\";\r\nimport {Launch, TransitEnterexit} from \"@material-ui/icons\";\r\n\r\n\r\nconst Editor = ({language, title, value, onChange}) => {\r\n    const [open, setOpen] = useState(true)\r\n    function handleChange(editor,data,value){\r\n        onChange(value);\r\n    }\r\n    return (\r\n        <div className={`editor-container ${open ? \"\" : \"collapsed\"}`}>\r\n            <div className=\"editor-title\">\r\n                 {title}\r\n                 <button onClick={()=>setOpen(prevOpen => !prevOpen)} className=\"expand-collapse-button\">\r\n                     {open ? <TransitEnterexit /> : <Launch />}\r\n                 </button>\r\n            </div> \r\n            <ControlledEditor\r\n            onBeforeChange={handleChange}\r\n            value={value}\r\n            className=\"code-mirror-wrapper\" options={{\r\n                lineWrapping:true,\r\n                line:true,\r\n                mode: language,\r\n                theme: \"material\",\r\n                lineNumbers: true,\r\n            }} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Editor\r\n","import React, { useEffect, useState } from 'react';\nimport Editor from \"./components/Editor\";\n\nconst App = () => {\n  const [html, setHtml] = useState(\"\");\n  const [css, setCss] = useState(\"\");\n  const [js, setJs] = useState(\"\");\n  const [srcDoc, setSrcDoc] = useState('')\n  \n  useEffect(()=>{\n    const timeout = setTimeout(()=>{\n      setSrcDoc(`\n    <html>\n    <body>${html}</body>\n    <style>${css}</style>\n    <script>${js}</script>\n    </html>\n    `);\n    },250);\n    return ()=>{\n      clearTimeout(timeout);\n    };\n  },[html, css, js]);\n\n  return (\n    <>\n    <div className=\"panel top-panel\">\n      <Editor title=\"HTML\" language=\"xml\" value={html} onChange={setHtml}/>\n      <Editor title=\"CSS\" language=\"css\"  value={css} onChange={setCss}/>\n      <Editor title=\"JS\" language=\"javascript\"  value={js} onChange={setJs}/>\n    </div>\n    <div className=\"panel\">\n      <iframe srcDoc={srcDoc} title=\"output\" sandbox=\"allow-scripts\" width=\"100%\" height=\"100%\" />\n    </div>\n    </>\n  )\n} \n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}